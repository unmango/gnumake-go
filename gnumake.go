// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 18 Jun 2025 22:33:09 CDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package gnumake

/*
#include <gnumake.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// Free function as declared in include/gnumake.h:42
func Free(str []byte) {
	cstr, cstrAllocMap := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&str)).Data)), cgoAllocsUnknown
	C.gmk_free(cstr)
	runtime.KeepAlive(cstrAllocMap)
}

// Alloc function as declared in include/gnumake.h:45
func Alloc(len uint32) []byte {
	clen, clenAllocMap := (C.uint)(len), cgoAllocsUnknown
	__ret := C.gmk_alloc(clen)
	runtime.KeepAlive(clenAllocMap)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// Eval function as declared in include/gnumake.h:48
func Eval(buffer string, fileLocation []FileLocation) {
	cbuffer, cbufferAllocMap := unpackPCharString(buffer)
	cfileLocation, cfileLocationAllocMap := unpackArgSFileLocation(fileLocation)
	C.gmk_eval(cbuffer, cfileLocation)
	packSFileLocation(fileLocation, cfileLocation)
	runtime.KeepAlive(cfileLocationAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
}

// Expand function as declared in include/gnumake.h:52
func Expand(str string) []byte {
	cstr, cstrAllocMap := unpackPCharString(str)
	__ret := C.gmk_expand(cstr)
	runtime.KeepAlive(cstrAllocMap)
	__v := (*(*[0x7fffffff]byte)(unsafe.Pointer(__ret)))[:0]
	return __v
}

// AddFunction function as declared in include/gnumake.h:72
func AddFunction(name string, _func FuncPtr, minArgs uint32, maxArgs uint32, flags uint32) {
	cname, cnameAllocMap := unpackPCharString(name)
	c_func, c_funcAllocMap := _func.PassValue()
	cminArgs, cminArgsAllocMap := (C.uint)(minArgs), cgoAllocsUnknown
	cmaxArgs, cmaxArgsAllocMap := (C.uint)(maxArgs), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	C.gmk_add_function(cname, c_func, cminArgs, cmaxArgs, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cmaxArgsAllocMap)
	runtime.KeepAlive(cminArgsAllocMap)
	runtime.KeepAlive(c_funcAllocMap)
	runtime.KeepAlive(cnameAllocMap)
}
