// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 18 Jun 2025 21:08:29 CDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package gnumake

/*
#include <gnumake.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"fmt"
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// allocFileLocationMemory allocates memory for type C.gmk_floc in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFileLocationMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFileLocationValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfFileLocationValue = unsafe.Sizeof([1]C.gmk_floc{})

// copyPCharBytes copies the data from Go slice as *C.char.
func copyPCharBytes(slice *sliceHeader) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CBytes(*(*[]byte)(unsafe.Pointer(&sliceHeader{
		Data: slice.Data,
		Len:  int(sizeOfCharValue) * slice.Len,
		Cap:  int(sizeOfCharValue) * slice.Len,
	}))))
	allocs.Add(mem0)

	return (*C.char)(mem0), allocs
}

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// allocCharMemory allocates memory for type C.char in C.
// The caller is responsible for freeing the this memory via C.free.
func allocCharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfCharValue))
	if mem == nil {
		panic(fmt.Sprintln("memory alloc error: ", err))
	}
	return mem
}

const sizeOfCharValue = unsafe.Sizeof([1]C.char{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *FileLocation) Ref() *C.gmk_floc {
	if x == nil {
		return nil
	}
	return x.refe443217c
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *FileLocation) Free() {
	if x != nil && x.allocse443217c != nil {
		x.allocse443217c.(*cgoAllocMap).Free()
		x.refe443217c = nil
	}
}

// NewFileLocationRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFileLocationRef(ref unsafe.Pointer) *FileLocation {
	if ref == nil {
		return nil
	}
	obj := new(FileLocation)
	obj.refe443217c = (*C.gmk_floc)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *FileLocation) PassRef() (*C.gmk_floc, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refe443217c != nil {
		return x.refe443217c, nil
	}
	meme443217c := allocFileLocationMemory(1)
	refe443217c := (*C.gmk_floc)(meme443217c)
	allocse443217c := new(cgoAllocMap)
	allocse443217c.Add(meme443217c)

	var cfilenm_allocs *cgoAllocMap
	refe443217c.filenm, cfilenm_allocs = copyPCharBytes((*sliceHeader)(unsafe.Pointer(&x.FileName)))
	allocse443217c.Borrow(cfilenm_allocs)

	var clineno_allocs *cgoAllocMap
	refe443217c.lineno, clineno_allocs = (C.ulong)(x.LineNumber), cgoAllocsUnknown
	allocse443217c.Borrow(clineno_allocs)

	x.refe443217c = refe443217c
	x.allocse443217c = allocse443217c
	return refe443217c, allocse443217c

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x FileLocation) PassValue() (C.gmk_floc, *cgoAllocMap) {
	if x.refe443217c != nil {
		return *x.refe443217c, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *FileLocation) Deref() {
	if x.refe443217c == nil {
		return
	}
	hxfc4425b := (*sliceHeader)(unsafe.Pointer(&x.FileName))
	hxfc4425b.Data = unsafe.Pointer(x.refe443217c.filenm)
	hxfc4425b.Cap = 0x7fffffff
	// hxfc4425b.Len = ? x.FileName x.refe443217c.filenm

	x.LineNumber = (uint64)(x.refe443217c.lineno)
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// packSSByte reads sliced Go data structure out from plain C format.
func packSSByte(v [][]byte, ptr0 **C.char) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfPtr]*C.char)(unsafe.Pointer(ptr0)))[i0]
		hxf95e7c8 := (*sliceHeader)(unsafe.Pointer(&v[i0]))
		hxf95e7c8.Data = unsafe.Pointer(ptr1)
		hxf95e7c8.Cap = 0x7fffffff
		// hxf95e7c8.Len = ?
	}
}

func (x FuncPtr) PassRef() (ref *C.gmk_func_ptr, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if funcPtr4ECC07B6Func == nil {
		funcPtr4ECC07B6Func = x
	}
	return (*C.gmk_func_ptr)(C.gmk_func_ptr_4ecc07b6), nil
}

func (x FuncPtr) PassValue() (ref C.gmk_func_ptr, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if funcPtr4ECC07B6Func == nil {
		funcPtr4ECC07B6Func = x
	}
	return (C.gmk_func_ptr)(C.gmk_func_ptr_4ecc07b6), nil
}

func NewFuncPtrRef(ref unsafe.Pointer) *FuncPtr {
	return (*FuncPtr)(ref)
}

//export funcPtr4ECC07B6
func funcPtr4ECC07B6(cnm *C.char, cargc C.uint, cargv **C.char) *C.char {
	if funcPtr4ECC07B6Func != nil {
		nm4ecc07b6 := packPCharString(cnm)
		argc4ecc07b6 := (uint32)(cargc)
		var argv4ecc07b6 [][]byte
		packSSByte(argv4ecc07b6, cargv)
		ret4ecc07b6 := funcPtr4ECC07B6Func(nm4ecc07b6, argc4ecc07b6, argv4ecc07b6)
		ret, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ret4ecc07b6)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var funcPtr4ECC07B6Func FuncPtr

// unpackPCharString copies the data from Go string as *C.char.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	allocs := new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	mem0 := unsafe.Pointer(C.CString(str))
	allocs.Add(mem0)
	return (*C.char)(mem0), allocs
}

// unpackArgSFileLocation transforms a sliced Go data structure into plain C format.
func unpackArgSFileLocation(x []FileLocation) (unpacked *C.gmk_floc, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(allocs, func(a *cgoAllocMap) {
		go a.Free()
	})

	len0 := len(x)
	mem0 := allocFileLocationMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.gmk_floc)(unsafe.Pointer(h0))
	for i0 := range x {
		allocs0 := new(cgoAllocMap)
		v0[i0], allocs0 = x[i0].PassValue()
		allocs.Borrow(allocs0)
	}
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.gmk_floc)(h.Data)
	return
}

// packSFileLocation reads sliced Go data structure out from plain C format.
func packSFileLocation(v []FileLocation, ptr0 *C.gmk_floc) {
	const m = 0x7fffffff
	for i0 := range v {
		ptr1 := (*(*[m / sizeOfFileLocationValue]C.gmk_floc)(unsafe.Pointer(ptr0)))[i0]
		v[i0] = *NewFileLocationRef(unsafe.Pointer(&ptr1))
	}
}
